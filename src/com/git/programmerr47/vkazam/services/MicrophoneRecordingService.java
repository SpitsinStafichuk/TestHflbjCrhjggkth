package com.git.programmerr47.vkazam.services;

import android.app.Service;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Binder;
import android.os.IBinder;
import android.preference.PreferenceManager;
import com.git.programmerr47.vkazam.VkazamApplication;
import com.git.programmerr47.vkazam.model.SongData;
import com.git.programmerr47.vkazam.utils.NetworkUtils;
import com.gracenote.mmid.MobileSDK.*;

import java.util.HashSet;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Service that provides recording audio from microphone
 * Relates with GraceNote and recieves fingerprint
 * generated by end of listening
 *
 * @author Michael Spitsin
 * @since 2014-04-13
 */
public class MicrophoneRecordingService extends Service implements GNOperationStatusChanged, GNFingerprintResultReady, OnStatusChangedListener {

    // Binder given to clients
    private final IBinder microphoneRecordingBinder = new MicrophoneRecordingBinder();
    private final GNConfig config = ((VkazamApplication) getApplication()).getConfig();
    private final Set<OnStatusChangedListener> onStatusListeners = new HashSet<OnStatusChangedListener>();

    private boolean isRecording;

    @Override
    public IBinder onBind(Intent intent) {
        return microphoneRecordingBinder;
    }

    /**
     * Records fingerprint one time
     */
    public void recordFingerprint() {
        recordNow();
    }

    /**
     * Cancels current recording fingerprint
     */
    public void cancelRecording() {
        GNOperations.cancel(this);
        isRecording = false;
    }

    private void recordNow() {
        if (!isRecording) {
            synchronized (this) {
                if (!isRecording) {
                    isRecording = true;
                    GNOperations.fingerprintMIDStreamFromMic(this, config);
                }
            }
        }
    }

    @Override
    public void GNStatusChanged(GNStatus status) {
        onStatusChanged(status.getMessage() + " " + status.getPercentDone() + "%");
    }

    @Override
    public void GNResultReady(GNFingerprintResult gnFingerprintResult) {
        isRecording = false;
        if(gnFingerprintResult.isFailure()) {
            onStatusChanged(String.format("[%d] %s", gnFingerprintResult.getErrCode(), gnFingerprintResult.getErrMessage()));
        } else {
            //recognize in RecognizeFingerprintService
        }
    }

    public void addOnStatusChangedListener(OnStatusChangedListener listener) {
        onStatusListeners.add(listener);
    }

    public void removeOnStatusChangedListener(OnStatusChangedListener listener) {
        onStatusListeners.remove(listener);
    }

    @Override
    public void onStatusChanged(String status) {
        for (OnStatusChangedListener listener : onStatusListeners) {
            listener.onStatusChanged(status);
        }
    }

    @Override
    public void onResultStatus(SongData data) {
        for (OnStatusChangedListener listener : onStatusListeners) {
            listener.onResultStatus(data);
        }
    }

    /**
     * Class used for the client Binder.  Because we know this service always
     * runs in the same process as its clients, we don't need to deal with IPC.
     */
    public class MicrophoneRecordingBinder extends Binder {

        /**
         * @return instance of RecognizeFingerprintService so clients can call public methods
         */
        MicrophoneRecordingService getService() {
            return MicrophoneRecordingService.this;
        }
    }
}
