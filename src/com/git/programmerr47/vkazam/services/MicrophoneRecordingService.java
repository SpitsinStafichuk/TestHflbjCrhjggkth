package com.git.programmerr47.vkazam.services;

import android.app.Service;
import com.git.programmerr47.vkazam.VkazamApplication;
import com.git.programmerr47.vkazam.model.FingerprintData;
import com.git.programmerr47.vkazam.model.SongData;
import com.gracenote.mmid.MobileSDK.*;

import java.util.*;

/**
 * Service that provides recording audio from microphone
 * Relates with GraceNote and receives fingerprint
 * generated by end of listening
 *
 * @author Michael Spitsin
 * @since 2014-04-13
 */
public class MicrophoneRecordingService extends RelatingService implements GNOperationStatusChanged, GNFingerprintResultReady, OnStatusChangedListener {

    private final Set<OnStatusChangedListener> onStatusListeners = new HashSet<OnStatusChangedListener>();

    private GNConfig config;
    private RecognizeFingerprintService recognizeFingerprintService;
    private FingerprintWrapper currentRecognizingWrapper;
    private boolean isRecording;

    @Override
    public void onCreate() {
        super.onCreate();

        config = ((VkazamApplication) getApplication()).getConfig();
    }

    @Override
    protected void onServiceConnected(Service service) {
        recognizeFingerprintService = (RecognizeFingerprintService) service;
    }

    @Override
    protected Class<?> getRelativeServiceClass() {
        return RecognizeFingerprintService.class;
    }

    /**
     * Records fingerprint one time
     */
    public void recordFingerprint() {
        if (!isWorking()) {
            synchronized (this) {
                if (!isWorking()) {
                    isRecording = true;
                    startServiceWorking();
                    GNOperations.fingerprintMIDStreamFromMic(this, config);
                }
            }
        }
    }

    /**
     * Cancels current recording fingerprint
     */
    private void cancelRecording() {
        GNOperations.cancel(this);
        isRecording = false;
    }

    /**
     * Cancels current recording fingerprint
     * or cancels recognizing already recorded fingerprint
     */
    public void cancel() {
        if (isRecording) {
            cancelRecording();
        } else if (isWorking()) {
            if (isRelativeServiceBound) {
                recognizeFingerprintService.cancel(currentRecognizingWrapper);
            }
        }

        stopWorking();
    }

    @Override
    public void GNStatusChanged(GNStatus status) {
        onStatusChanged(status.getMessage() + " " + status.getPercentDone() + "%");
    }

    @Override
    public void GNResultReady(GNFingerprintResult gnFingerprintResult) {
        isRecording = false;
        if(gnFingerprintResult.isFailure()) {
            onStatusChanged(String.format("[%d] %s", gnFingerprintResult.getErrCode(), gnFingerprintResult.getErrMessage()));
        } else {
            FingerprintData fingerprint = new FingerprintData(gnFingerprintResult.getFingerprintData(), new Date());
            currentRecognizingWrapper = new FingerprintWrapper(fingerprint, this, FingerprintWrapper.RECOGNIZE_PRIORITY_HIGHEST);
            recognizeFingerprintService.recognize(currentRecognizingWrapper);
        }
    }

    public void addOnStatusChangedListener(OnStatusChangedListener listener) {
        onStatusListeners.add(listener);
    }

    public void removeOnStatusChangedListener(OnStatusChangedListener listener) {
        onStatusListeners.remove(listener);
    }

    @Override
    public void onStatusChanged(String status) {
        if (RecognizeFingerprintService.STATUS_NO_CONNECTION.equals(status)) {
            //TODO add to db fingerprint
            currentRecognizingWrapper = null;
        } else {
            for (OnStatusChangedListener listener : onStatusListeners) {
                listener.onStatusChanged(status);
            }
        }
    }

    @Override
    public void onResultStatus(SongData data) {
        for (OnStatusChangedListener listener : onStatusListeners) {
            listener.onResultStatus(data);
        }

        currentRecognizingWrapper = null;
        stopWorking();
    }
}
